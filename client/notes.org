* Tavis's very rough notes

** TODO
- graph the metrics
- add something that generates UI events
- add some state machine that consumes both UI events and 
  the request metrics
- enable on/off control of the metrics ws subscription


** talk focus

Reading the http://www.reactivemanifesto.org/ I think everything I
want to say falls under the 'loose coupling' benefits of 'going
reactive'. I'll talk primarily about the benefits of separating
intent/event and implementation/reaction from simplicity, flexibility,
introspection and debugging perspectives. E.g. how it reduces control
flow complexity and keeps what remains separate from the declaritive
core of the domain/ui models. I'll also mention location
transparency - something Roman and I highlighted in our talk last year
at Polyglot - and temporal transformations on events streams
(throttling, sampling, etc.).

I won't talk about scalability, low-latency, 'responsiveness',
throughput, or resilience. All yours :)
** credits

async-pain.jpg 
http://2.bp.blogspot.com/_vQ6O0h8keoE/TNxPujs_NVI/AAAAAAAAAN0/Uc9xerMgsXQ/s1600/Pain+Management.3.jpg

snakeoil.jpg 
https://img0.etsystatic.com/000/0/6779531/il_fullxfull.315178324.jpg

dont-stop-believing.jpg
http://www.murraymoerman.com/images/hope.jpg

silver-bullet.jpg http://www.chronicle.su/wp-content/uploads/silver-bullet.jpg

erik.jpg 'https://pbs.twimg.com/media/Bix4ZdFCMAAVpN1.jpg:large'

Ballmer
  http://metronewsca.files.wordpress.com/2013/04/ballmer.jpg
  http://youtu.be/e8M6S8EKbnU?t=1m24s developers developers
  https://www.youtube.com/watch?v=e8M6S8EKbnU&feature=youtu.be&t=2m10s

Steve Ballmer as a getter of quotes
  https://www.youtube.com/watch?v=sTSQlYX5DU0&feature=youtu.be&t=10m44s

cable-mess{1,2,3}.jpg
http://www.l-com.com/blog/image.axd?picture=2014%2F3%2Fcable-mess.jpg
http://www.l-com.com/blog/image.axd?picture=2014%2F3%2F2180039413_f54b142ff4_o.jpg
http://www.kirupa.com/html5/images/messy_wires.jpg


** rough outline

- outline
  from 

  async:
  - ask audience what approaches they've used?
    - callbacks, node event emitter, futures, twisted, golang, actors?

  silver bullet http://www.chronicle.su/wp-content/uploads/silver-bullet.jpg
    - a unified programming model
      based on a unifying interface: Observables (with bridges to other models)
      it's a unicorn

      It's jet li / the one unifying all the worlds
      http://i1.ytimg.com/vi/UpOTHprtOec/maxresdefault.jpg
      It also unifies the coding style for many use cases

  while working at MS

  My goal with this talk: -> stand up, raise your hands, Observables Observables Observables

  netflix (one episode)
  http://wordsbecomesuperflous.files.wordpress.com/2014/04/animal-memes-598.jpg

  Ben's talk "functional reactive programming in the Netflix API"
  http://www.infoq.com/resource/presentations/netflix-functional-rx/en/slides/sl1.jpg
    - api owners determine how concurrency is implemented
    - endpoint/device developers use Rx to consume & coordinate
      concurrent inputs without having to worry about details or spin
      up their own thread pools or make a mess with callbacks. Futures
      and callbacks are fine for limited use on 1 or 2 things but
      compose and nest horribly. Very easy to accidentally convert
      into a blocking call (big no-no). Akka/Scala composable futures
      were an alternative but were limited to one language. Jafar came
      from MS at the right time.
      
      Observable is an extension of the GoF Observer pattern. Adds 2 extra callbacks.

Pull / Push slide (15m14s)
->
2 snippets vertically aligned below Pull / Push
#+begin_src coffeescript
#Iterable<String>
# such as [String]
getDataFromLocalMemory()
  .skip(10)
  .take(5)
  .map(s -> s + '_transformed')
  .forEach(s -> console.log('next => ' + s))
#+end_src

#+begin_src coffeescript
#Observable<String>
#getDataFromExpensiveComputation()
#getDataFromAjaxCall()
#getDataFromWebWorker()
getDataFromServerInJapan()
  .skip(10)
  .take(5)
  .map(s -> s + '_transformed')
  .subscribe(s -> console.log('next => ' + s))
#+end_src
<- transform 2nd into first for cold observables; exact same api Works
with blocking synchronous access from memory, threads, multiple
threads in a pool, actors, or NIO / event loops

*Decouples implementation details from api design and consumption*.
Client code treats everything the same, as asynchronous, and the API
choose the concurrency model and manages all associated resources.

18m04s slide of rx in multiple langs. Hello world in each. I should add js.
It's a polyglot api.

19m13 marble diagram of core flow: create {onNext, onNext; onComplete}
  grammar: onNext* [onError | onCompleted]
  distinct time ordering
  three good examples 
     -----1-----2-----3---------->
     -----1----2--|
     ---1---X
  bad
     -----1---|  3-4---
          2 

21m merge(a,b,c) all same type, progressive rendering
22m25 zip(a,b,c, (a,b,c) -> [a,b,c])
23m error handling via onError
24m15 error handling via onErrorResumeNext for fallback data

29m great extended example using flatMap. Summary diagram at 30m52

lots of great marble diagrams on 
https://github.com/Netflix/RxJava/wiki/Transforming-Observables

  Jafar http://media.ch9.ms/ch9/2cfe/4ef3190d-203f-4795-86b9-e11f0bec2cfe/YOW2012JafarHusainRx_512.jpg
  + pic of Ben on my desktop
  Matthew of RxJS http://2012.cascadiajs.com/asset/img/mattpodwysocki.png  
   

  http://makeameme.org/media/created/Monads-monads-everywhere.jpg
  https://i.chzbgr.com/maxW500/6118875136/h1B91E4DF/ say monad one
  more time https://pbs.twimg.com/media/Bdu68sACYAAfkkr.jpg:large
  (later, all the rx operators are monadic or comonadic. Difference
  from composable futures is rx emits an observable at each step
  rather than a scalar value.)
   
  So now that we've had our fix of memes and Steve Ballmer let's get
  down to some code. I'm going to be deadly serious for the rest of
  the talk. And then I'm going to start waving my hands. Waving them
  like Bill here and selling you a vision.

  The end.
  http://gilesbowkett.com/images/seen_the_light_dog.jpg

- what if I told you there is one API you could learn to solve many
  seemingly unrelated problems? Silver bullet?? Hell yes.

- WTF is 'reactive': snippet from Eric Meier's reactconf talk
  http://youtu.be/sTSQlYX5DU0?t=3m28s
  'tasteful composition of side-effects'
  four fundamental effects
- brief interlude to intro coffeescript syntax
- Overview of Reactive Manifesto and my focus on 'loose coupling'
- architect your applications - both domain code and UIs - around
  decoupled event streams instead of directly coupling the
  implementation/reaction to the event sources with callbacks.
  Jesus Facepalm
- Reactive Extensions are like jquery for event streams
- it is a 'language' for composing larger event streams out of
  primitive operations, means of combination and means of abstraction
  (Sussman's talk:
  http://video.mit.edu/watch/an-electrical-engineering-view-of-a-mechanical-watch-9035/)
  The objects formed from composing primitive elements behave and can
  be composed just like the primitives.
- ...
- separation of lifecyle steps:
  - declare (and compose)
  - publish
  - subscribe
- gears example with flatMap
  information flow (sender, message, channel, receiver, feedback)
- generation of synthetic events
  quickcheck style testing
- record / replay example
- relationship to frp / dataflow programming 
  declarative expression of dependencies & relationships
  building blocks: 
  1) event streams 
  2) signals / behaviours / reactive values (Conal: values over continuous time)
     discrete occurences over time
     Properties in bacon.js
     cells in spreadsheets
- show dependence on subscription time re Hot observables
  mention Bacon.js

- definitions of core types
  Observable
  Observer
  Subject (Async.., Behaviour..., Replay..., others not in rxjs yet)
  Disposable
  Scheduler
- examples
  https://gist.github.com/ekantola/5507237
  good logging functions
  
  http://www.slideshare.net/mattpodwysocki/cascadiajs-dont-cross-the-streams
  https://github.com/Reactive-Extensions/StrangeLoop2013/blob/master/StrangeLoop%202013.pdf
  https://github.com/Reactive-Extensions/StrangeLoop2013/tree/master/RxDemos
  explain 

- with jQuery
- http://blog.ankl.am/rx-101-event-delegation/
- vs Knockout & bacon.js
- vs promises?
- with angular, react, backbone, ember, etc.??
- server side with node.js?
- schedulers

- hand-waving
  don't focus on the wiring. Instead focus on the transfer of information.

** very rough initial brainstorm / notes on my talk:
- what is an event?
- define effects
- steams, sequences, pipes: iterables vs observables
 event streams are equivalent to input/output simplicity benefits of FP
- easy to understand, compose, debug and much more
- don't think of Rx as a way to chain callbacks!
- and for fuck's sake don't design by callback chaining
  mvc / data binding = FAIL
  50 times no slide sequence
- better metaphors:
  - it is a means to plumb event pipelines together
  - treat async events like collections
  - transform / compose (zip, selectMany, merge) / query (where, any)
  - time handling: buffer, throttle, window functions
  - Rx provides gears like a machine to transform your input events into either
    - output events
    - or effects (.subscribe)
- separation of concerns: intent/behaviour, interface/implementation, event/reaction
- system state is a derived from events (ui, network, whatever) that have occurred
- learn to think in state machines
- frp / uis
- higher order event streams (composed event streams)
  a bit like higher order functions
- deterministic replay of non-deterministic original event stream
- mention Ix library
- a bit about React.js and how it's V-only philosophy fits well with what I've said
  and with Rx
  http://facebook.github.io/react/docs/thinking-in-react.html
- drag and drop example with bounds and inertia
http://tarnbarford.net/journal/revisiting-dragging-and-inertia-with-rxjs

select mouseDowns
    selectMany mouseMoves
        Select frames
            yield positions
        until mouse
    concat
        select frame
            yield positions
        until mouseDown merge (or) itemStopedMoving

** operators by category
 https://github.com/Reactive-Extensions/RxJS/blob/master/doc/gettingstarted/categories.md
** querying
https://github.com/Reactive-Extensions/RxJS/blob/master/doc/gettingstarted/querying.md
** resources to study before talk
http://futurejs.org/agenda/streaming-and-event-based-programming-using-frp-and-rxjs
https://github.com/Reactive-Extensions/FutureJS
http://blogs.endjin.com/2014/04/event-stream-manipulation-using-rx-part-1/
 good post with event diagrams

https://gist.github.com/ScottWeinstein/11149384
The Four Essential Eﬀects In Programming:
             One        Many
Synchronous  T/Try[T]   Iterable[T]
Asynchronous Future[T]  Observable[T]

http://sitr.us/2013/05/22/functional-reactive-programming-in-javascript.html
An Introduction to Functional Reactive Programming CM's talk':
 http://lanyrd.com/2013/nodepdx/schbpc/
http://weareadaptive.com/blog/2014/05/05/everything-is-a-stream/

https://www.youtube.com/watch?v=FqBq4uoiG0M
review intro material at https://github.com/Reactive-Extensions/RxJS

see http://neugierig.org/software/blog/2014/02/react-jsx-coffeescript.html
for notes on using React directly in coffeescript rather than via jsx
